# python script
import sys
startDate = sys.argv[1] # '2020-09-09'
generateAnotherAccount = False

startDaySeries = df[startDate]
startDaySeries = startDaySeries[np.NaN != startDaySeries] # 去掉NaN非法数据
longSymbols = list(oneDaySeries.columns)
shortSymbols = list(oneDaySeries.columns)
for oneDay in df:
  mostLossSymLong = getMostLossSymLong(oneDay) # 有可能返回None, 返回下跌幅度最大的
  mostLossSymShort = getMostLossSymShort(oneDay)
  if (mostLossSymLong in longSymbols) and (mostLossSymLong > mostLossSymShort): # 在sym列表内就删除
    stopLossLong(mostChangeSym)
  elif (mostLossSymShort in shortSymbols) and (mostLossSymShort >= mostLossSymLong): 
    stopLossShort(mostChangeSym)
  elif (not generateAnotherAccount) and ((None != mostLossSymLong) and (None != mostLossSymShort)): # 如果没建立过新帐户,就建立一个新帐户. 如果返回的是新品种, 也会建立新帐户
    generateNewAccount(oneDayDate)
    generateAnotherAccount = True
  else:
    #ignore today's mostChange # 没有下跌的,或已建立过新帐户,则忽略

# 执行新帐户的脚本, 各帐户呈链式执行
import subprocess
subprocess.run(["ls", "-l"])

import os
cmd = "git --version"
returned_value = os.system(cmd)  # returns the exit code in unix
print('returned value:', returned_value)

os.system("kill -9 %d"%(os.getppid()))

  
###################################################################

import pandas as pd
# 参数
slidingwindow=27
stepsize=27
# 全局变量
df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
                   'num_wings': [2, 0, 0, 0],
                   'num_specimen_seen': [10, 2, 1, 8]},
                  index=['falcon', 'dog', 'spider', 'fish'])

df_logret = []

positions = {}
# 定义函数
def initialize():
  pass

def handle(i):
  row = df.iloc[i]
  print(row)
  pass

def ending(): # 收尾
  pass

# 运行代码
initialize()
# for index in df.index: 
for i in range(len(df.index)): # 隐式index=0,1...
  handle(i)

ending()

######################################################################
t:("DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"; enlist ",") 0: `:/tmp/a.csv

/ 处理非法数据, 避免出错除0, 或log 0
f: {(x where x=0.0):0n;x} / 把0设置成NaN
t: f each t / table的每一个行中的0设置为NaN

t1: `date xkey t
deltas0:{first[x] -': x}
t2:deltas0 log t1 
`:/tmp/t2.csv 0: csv 0: t2
`:/tmp/last.csv 0: csv 0: flip enlist each last t



import pandas as pd
import numpy as np

def sort_row(row):
  c = d = None
  a = row[row.notna()] # 过滤掉NaN  
  shortSell = a[a<0] # 只要负收益
  shortSell.index  = [(x, 1) for x in shortSell.index]
  a = np.negative(a) # short  
  longBuy = a[a<0] # 只要负收益
  longBuy.index  = [(x, -1) for x in longBuy.index]
  ret = longBuy.append(shortSell)
  ret = ret.sort_values()
  return list(ret.index)
  
orders = pd.DataFrame(columns=['datetime', 'sym', 'price', 'size', 'subaccount'])
def stopLoss(d, sym, size):
  price = df.loc[d,sym]
  # ID 日期datetime  符号sym  price 单量及方向size employee 虚拟子帐户subaccount, automatic
  orders.loc[len(orders)] = [d, sym, price, size, 1]
  print(f"datetime:{d}, sym:{sym}, price:{price}, size:{size}, subaccount:1")

positions = [(x,1) for x in syms] + [(x, -1) for x in syms]
return_log = pd.read_csv("/tmp/t2.csv", parse_dates = ['date']) 
return_log = return_log.set_index('date')
return_log = return_log[1:]
for d in return_log.index:
  print(d) # 打印日期
  row = return_log.loc[d]
  print(len(row))
  loss_syms = sort_row(row)  
  print(len(loss_syms))
  loss_syms = loss_syms[:2] # 仅取2个
  for (sym, size) in loss_syms:
    print(f'sym:{sym}, size:{size}')
    if (sym,size) in positions:
      stopLoss(d, sym, size)
      positions.remove((sym,size))
      break
      
orders.to_csv('/tmp/orders.csv',index=False)
  
orders:("DSFII"; enlist ",") 0: `:/tmp/orders.csv

