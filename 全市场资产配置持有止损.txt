# python script
import sys
startDate = sys.argv[1] # '2020-09-09'
generateAnotherAccount = False

startDaySeries = df[startDate]
startDaySeries = startDaySeries[np.NaN != startDaySeries] # 去掉NaN非法数据
longSymbols = list(oneDaySeries.columns)
shortSymbols = list(oneDaySeries.columns)
for oneDay in df:
  mostLossSymLong = getMostLossSymLong(oneDay) # 有可能返回None, 返回下跌幅度最大的
  mostLossSymShort = getMostLossSymShort(oneDay)
  if (mostLossSymLong in longSymbols) and (mostLossSymLong > mostLossSymShort): # 在sym列表内就删除
    stopLossLong(mostChangeSym)
  elif (mostLossSymShort in shortSymbols) and (mostLossSymShort >= mostLossSymLong): 
    stopLossShort(mostChangeSym)
  elif (not generateAnotherAccount) and ((None != mostLossSymLong) and (None != mostLossSymShort)): # 如果没建立过新帐户,就建立一个新帐户. 如果返回的是新品种, 也会建立新帐户
    generateNewAccount(oneDayDate)
    generateAnotherAccount = True
  else:
    #ignore today's mostChange # 没有下跌的,或已建立过新帐户,则忽略

# 执行新帐户的脚本, 各帐户呈链式执行
import subprocess
subprocess.run(["ls", "-l"])

import os
cmd = "git --version"
returned_value = os.system(cmd)  # returns the exit code in unix
print('returned value:', returned_value)

os.system("kill -9 %d"%(os.getppid()))

  
###################################################################

import pandas as pd
# 参数
slidingwindow=27
stepsize=27
# 全局变量
df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
                   'num_wings': [2, 0, 0, 0],
                   'num_specimen_seen': [10, 2, 1, 8]},
                  index=['falcon', 'dog', 'spider', 'fish'])

df_logret = []

positions = {}
# 定义函数
def initialize():
  pass

def handle(i):
  row = df.iloc[i]
  print(row)
  pass

def ending(): # 收尾
  pass

# 运行代码
initialize()
# for index in df.index: 
for i in range(len(df.index)): # 隐式index=0,1...
  handle(i)

ending()
