# 设置参数
all_vars_list=["CU", "abc", "NI", "WR"] # 所有品种
start_day="20180712" # 开始时间
end_day="20180719" # 结束时间

import akshare as ak

# 下载数据
receiptData = []
vars_list_remove = []
for sym in all_vars_list:
  data = ak.get_receipt(start_day=start_day, end_day=end_day, vars_list=[sym])
  if len(data) > 0 and not 0 in data['receipt'].values: # 真正取回了数据, 且分母不为0 
    changed = data.apply(lambda x: (x['receipt_chg'] / x['receipt'] + 1), axis=1) # 变化到原来的比率
    receiptData.append(changed.cumprod())  # 累积变化比率
    dateData = data.iloc[:,3] # 记录下日期列
  else:
    vars_list_remove.append(sym)
  # print (data)
  
receiptData.append(pd.to_datetime(dateData, format="%Y%m%d") ) # 添加日期列，由字符串改为日期型

# 删除没有取回的数据的品种
for sym in vars_list_remove:
  all_vars_list.remove(sym)
  
all_vars_list.append('date') #改列名
  
# 数据结果为result
import pandas as pd
result = pd.concat(receiptData, axis=1, sort=False)
result.columns = all_vars_list #列名

# 存成csv文件, 不存索引
result.to_csv("result.csv", index=0) 
#######################################################################################
# 画图, 多个品种的库存曲线图
import plotly.express as px
# result = px.data.stocks()
# result = pd.read_csv("/tmp/result.csv")
fig = px.line(result, x="date", y=result.columns,
              hover_data={"date": "|%B %d, %Y"},
              title='注册仓单变化趋势')
fig.update_xaxes(
    dtick="M1",
    tickformat="%b\n%Y",
    ticklabelmode="period")
fig.show()

#######################################################################################
# 获取指数数据
sym = 'CU99' # 指数

import akshare as ak
import pandas as pd

get_futures_daily_df = ak.get_futures_daily(start_date=start_day, end_date=end_day, market="SHFE", index_bar=True) # 合成指数
print(get_futures_daily_df)
data = get_futures_daily_df.loc[get_futures_daily_df['symbol'] == sym, ['date', 'settle']]
dateData = data['date']
data['date'] = pd.to_datetime(dateData, format="%Y%m%d") 

# 存成csv文件, 不存索引
data.to_csv("data.csv", index=0) 
#######################################################################################
# 价格与库存画在同一图中
sym = 'CU'

import plotly.graph_objects as go
from plotly.subplots import make_subplots

# data = pd.read_csv("/tmp/data.csv")

# Create figure with secondary y-axis
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add traces
fig.add_trace(
    go.Scatter(x=data['date'], y=data['settle'], name="价格"),
    secondary_y=False,
)

fig.add_trace(
    go.Bar(x=result['date'], y=result[sym], name="库存"),
    secondary_y=True,
)

# Add figure title
fig.update_layout(
    title_text="Double Y Axis Example"
)

# Set x-axis title
fig.update_xaxes(title_text="xaxis title")

# Set y-axes titles
fig.update_yaxes(title_text="<b>primary</b> yaxis title", secondary_y=False)
fig.update_yaxes(title_text="<b>secondary</b> yaxis title", secondary_y=True)

fig.show()
